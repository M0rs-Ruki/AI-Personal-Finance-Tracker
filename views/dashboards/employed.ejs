<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>QuantumWealth | Financial Dashboard</title>
    <link rel="shortcut icon" href="/images/logo.png" type="image/x-icon" />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700;800&family=Inter:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/styles/dashboard/employed.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
    <!-- Global Navigation -->
    <header class="header">
      <div class="logo">
        <div class="logo-icon">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
            <path d="M12 2L15 9L22 9L16 14L18 22L12 17L6 22L8 14L2 9L9 9L12 2Z" stroke="#0F0F0F" stroke-width="2" />
          </svg>
        </div>
        <div class="logo-text">Welcome Back <%= user.fullName %> !</div>
        <div
          style="display:inline-block; margin-left:1rem; font-size:0.75rem; background-color:#FFD700; color:#0F0F0F; padding:0.25rem 0.5rem; border-radius:0.375rem; font-weight:bold; font-family:'Montserrat',sans-serif; letter-spacing:0.05em;">
          BETA
        </div>
      </div>
      <div class="user-profile">
        <div class="actions flex gap-6 pr-6 text-white text-xl">
          <i class="fas fa-cog hover:text-[#FFD700] transition-colors duration-200 cursor-pointer"
            onclick="window.location.href='/employed/edit'"></i>
          <i class="fas fa-user-astronaut hover:text-[#FFD700] transition-colors duration-200 cursor-pointer"
            onclick="window.location.href='/employed/profile'"></i>
          <i class="fas fa-power-off hover:text-[#FFD700] transition-colors duration-200 cursor-pointer"
            onclick="window.location.href='/user/logout'"></i>
        </div>
      </div>  
    </header>

    <div style="margin-bottom: 40px;"></div>
    <div>
        <!-- Income Section -->
        <section class="section">
            <div class="section-header">
                <h2 class="section-title"><i class="fas fa-money-bill-wave"></i> Income Details</h2>
                <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
            </div>
            
            <div class="income-grid">
                <div class="income-card">
                  <div class="income-card-header">
                    <div class="income-type">Primary Income</div>
                    <div class="income-amount">Total: ₹<%= employer.monthlySalary.toLocaleString('en-IN') %>
                    </div>
                  </div>
                
                  <div class="income-details">
                    <div class="detail-item">
                      <span class="detail-label">Job Title</span>
                      <span class="detail-value">
                        <%= employer.jobTitle %>
                      </span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Employment Type</span>
                      <span class="detail-value">
                        <%= employer.employmentType %>
                      </span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Company</span>
                      <span class="detail-value">
                        <%= employer.company %>
                      </span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Industry</span>
                      <span class="detail-value">
                        <%= employer.workIndustry %>
                      </span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Location</span>
                      <span class="detail-value">
                        <%= employer.workLocation %>
                      </span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Pay Frequency</span>
                      <span class="detail-value">
                        <%= employer.payFrequency %>
                      </span>
                    </div>
                  </div>
                  <div style="margin-bottom: 30px;"></div>
                  <div class="income-card">
                    <p class="detail-label">
                      <span class="detail-value">Beta Notice Description:</span>
                      This project is currently in its Beta version. While the core 
                      features are functional, many enhancements, improvements, and 
                      additional modules are still under active development. We 
                      appreciate your patience as we continue to refine the 
                      platform and roll out updates.
                    </p>
                  </div>
                </div>
                <% 
                  let totalAdditionalIncome = 0;

                  // Add income sources
                  employer.additionalIncomeSources.forEach(source => {
                    const amount = typeof source.amount === 'string' ? parseFloat(source.amount) : source.amount;
                    totalAdditionalIncome += amount;
                  });

                  // Add bonus if exists and has amount
                  if (employer.hasBonuses && employer.bonusDetails?.amount) {
                    const bonusAmount = typeof employer.bonusDetails.amount === 'string'
                      ? parseFloat(employer.bonusDetails.amount)
                      : employer.bonusDetails.amount;
                    totalAdditionalIncome += bonusAmount;
                  }
                %>

                <%
                  // Initialize core financial values once
                  const salary = employer.monthlySalary || 0;

                  let totalAdditional = 0;
                  employer.additionalIncomeSources.forEach(src => {
                    totalAdditional += typeof src.amount === 'string' ? parseFloat(src.amount) : src.amount;
                  });

                  let bonus = 0;
                  if (employer.hasBonuses && employer.bonusDetails?.amount) {
                    bonus = typeof employer.bonusDetails.amount === 'string'
                      ? parseFloat(employer.bonusDetails.amount)
                      : employer.bonusDetails.amount;
                  }

                  const totalIncome = salary + totalAdditional + bonus;

                  let totalFixed = 0;
                  employer.fixedExpenses.forEach(exp => {
                    totalFixed += typeof exp.amount === 'string' ? parseFloat(exp.amount) : exp.amount;
                  });

                  let totalVariable = 0;
                  employer.budgetLimits.forEach(limit => {
                    totalVariable += typeof limit.limit === 'string' ? parseFloat(limit.limit) : limit.limit;
                  });

                  const estimatedSavings = totalIncome - totalFixed - totalVariable;
                %>


                <div class="income-card">
                  <!-- Total sum -->
                  <div class="income-type">Total Additional Income (including bonus)</div>
                  <div class="income-card-header">
                    <div></div>
                    <div class="income-amount">Total: ₹<%= totalAdditionalIncome.toLocaleString('en-IN') %></div>
                  </div>

                  <!-- List sources -->
                  <% employer.additionalIncomeSources.forEach(source => { 
                    const amount = typeof source.amount === 'string' ? parseFloat(source.amount) : source.amount;
                  %>
                    <div class="income-details mt-4 border-t border-gold-primary/20 pt-4">
                      <div class="detail-item">
                        <span class="detail-label">Source</span>
                        <span class="detail-value"><%= source.name %></span>
                      </div>
                      <div class="detail-item">
                        <span class="detail-label">Amount</span>
                        <span class="detail-value">₹<%= amount.toLocaleString('en-IN') %></span>
                      </div>
                      <div class="detail-item">
                        <span class="detail-label">Frequency</span>
                        <span class="detail-value"><%= source.frequency %></span>
                      </div>
                    </div>
                  <% }); %>

                  <!-- Bonus details (optional) -->
                  <% if (employer.hasBonuses && employer.bonusDetails) { %>
                    <div class="income-details mt-4 border-t border-gold-primary/20 pt-4">
                      <div class="detail-item">
                        <span class="detail-label">Source</span>
                        <span class="detail-value">Bonus</span>
                      </div>
                      <div class="detail-item">
                        <span class="detail-label">Amount</span>
                        <span class="detail-value">₹<%= employer.bonusDetails.amount.toLocaleString('en-IN') %></span>
                      </div>
                      <div class="detail-item">
                        <span class="detail-label">Frequency</span>
                        <span class="detail-value"><%= employer.bonusDetails.frequency %></span>
                      </div>
                    </div>
                  <% } %>
                </div>

                </div>
            </div>
        </section>
    </div>

    <div style="margin-bottom: 40px;"></div>

    <!-- AI Assistant Trigger -->
    <!-- <div class="ai-trigger">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path
          d="M19 4H5C3.89543 4 3 4.89543 3 6V18C3 19.1046 3.89543 20 5 20H19C20.1046 20 21 19.1046 21 18V6C21 4.89543 20.1046 4 19 4Z"
          stroke="#0F0F0F"
          stroke-width="2"
        />
        <path d="M16 8H8V12H16V8Z" fill="#0F0F0F" />
        <path
          d="M10 15H14"
          stroke="#0F0F0F"
          stroke-width="2"
          stroke-linecap="round"
        />
        <path
          d="M12 13V17"
          stroke="#0F0F0F"
          stroke-width="2"
          stroke-linecap="round"
        />
      </svg>
    </div> -->

    <!-- Dashboard Content -->
    <div class="dashboard">
      <!-- Financial Summary Dashboard -->
      <div class="summary-grid">
        <div class="card summary-card">
          <div class="section-title">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
              <path
                d="M12 1V23"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M17 5H9.5C8.57174 5 7.6815 5.36875 7.02513 6.02513C6.36875 6.6815 6 7.57174 6 8.5C6 9.42826 6.36875 10.3185 7.02513 10.9749C7.6815 11.6313 8.57174 12 9.5 12H14.5C15.4283 12 16.3185 12.3687 16.9749 13.0251C17.6313 13.6815 18 14.5717 18 15.5C18 16.4283 17.6313 17.3185 16.9749 17.9749C16.3185 18.6313 15.4283 19 14.5 19H6"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
            </svg>
            Income Hub
          </div>
          <div class="chart-container">
            <canvas id="incomeChart" width="200" height="120"></canvas>
          </div>
          <div class="flex-center gap-6">
            <div class="flex-center">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                <circle
                  cx="12"
                  cy="12"
                  r="9"
                  stroke="#FFD700"
                  stroke-width="1.5"
                />
                <circle cx="12" cy="12" r="3" fill="#FFD700" />
              </svg>
              <span>Salary: ₹<%= employer.monthlySalary.toLocaleString('en-IN') %></span>
            </div>
            <div class="flex-center">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                <circle
                  cx="12"
                  cy="12"
                  r="9"
                  stroke="#FFD700"
                  stroke-width="1.5"
                />
                <circle cx="12" cy="12" r="3" fill="#FFD700" />
              </svg>
              <span>Other: ₹<%= totalAdditionalIncome.toLocaleString('en-IN') %></span>
            </div>
          </div>
        </div>


        <div class="card summary-card">
          <div class="section-title">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
              <path d="M17 9V7C17 5.89543 16.1046 5 15 5H5C3.89543 5 3 5.89543 3 7V13C3 14.1046 3.89543 15 5 15H15C16.1046 15 17 14.1046 17 13V11" stroke="#FFD700" stroke-width="2" stroke-linecap="round"/>
              <path d="M8 12H12" stroke="#FFD700" stroke-width="2" stroke-linecap="round"/>
              <path d="M20 9H18C16.8954 9 16 9.89543 16 11V15C16 16.1046 16.8954 17 18 17H20" stroke="#FFD700" stroke-width="2"/>
              <path d="M21 14H19" stroke="#FFD700" stroke-width="2" stroke-linecap="round"/>
            </svg>
            Expense Matrix
          </div>

          <div class="chart-container">
            <canvas id="expenseChart" width="200" height="120"></canvas>
          </div>

          <div class="flex-center gap-6 mt-4">
            <div class="flex-center gap-2">
              <div style="width: 10px; height: 10px; background: #4caf50; border-radius: 2px;"></div>
              <span>Fixed: ₹<%= totalFixed.toLocaleString('en-IN') %></span>
            </div>
            <div class="flex-center gap-2">
              <div style="width: 10px; height: 10px; background: #f44336; border-radius: 2px;"></div>
              <span>Variable: ₹<%= totalVariable.toLocaleString('en-IN') %></span>
            </div>
          </div>
        </div>


        <div class="card summary-card">
          <div class="section-title">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
              <path
                d="M12 2V6"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M12 18V22"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M5 12H1"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M23 12H19"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M6 6L3 3"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M21 21L18 18"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M18 6L21 3"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <path
                d="M3 21L6 18"
                stroke="#FFD700"
                stroke-width="2"
                stroke-linecap="round"
              />
              <circle cx="12" cy="12" r="4" stroke="#FFD700" stroke-width="2" />
            </svg>
            Savings Estimate
          </div>
          <div class="chart-container flex-center">
            <div class="text-gold" style="font-size: 22px; font-weight: 700">
              ₹<%= estimatedSavings.toLocaleString('en-IN') %>
            </div>
          </div>
          <div class="flex-center" style="justify-content: space-between">
            <div style="font-size: 13px">
              <div>Total Income: <span class="text-gold">₹<%= totalIncome.toLocaleString('en-IN') %></span></div>
              <div>Fixed Expenses: <span class="text-gold">₹<%= totalFixed.toLocaleString('en-IN') %></span></div>
              <div>Variable Expenses: <span class="text-gold">₹<%= totalVariable.toLocaleString('en-IN') %></span></div>
            </div>
            <div class="text-gold" style="font-size: 13px; font-weight: 500">
              Est.Monthly Savings
            </div>
          </div>
        </div>
      </div>

      <!-- Financial Goals Tracker -->
      <div class="card goals-section">
        <div class="section-title">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
            <path
              d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
              stroke="#FFD700"
              stroke-width="2"
            />
            <path
              d="M12 6V12L16 14"
              stroke="#FFD700"
              stroke-width="2"
              stroke-linecap="round"
            />
          </svg>
          Goals Tracker
        </div>
        <div class="goals-grid">
          <% employer.financialGoals.forEach(goal => {
            const progressPercent = Math.min(100, Math.round((goal.currentProgress / goal.targetAmount) * 100));
            const radius = 22;
            const circumference = 2 * Math.PI * radius;
            const offset = circumference - (progressPercent / 100) * circumference;
          %>

            <div class="goal-card">
              <div class="progress-ring">
                <svg width="50" height="50" viewBox="0 0 50 50">
                  <circle class="progress-ring-bg" cx="25" cy="25" r="<%= radius %>" />
                  <circle
                    class="progress-ring-fill"
                    cx="25"
                    cy="25"
                    r="<%= radius %>"
                    stroke-dasharray="<%= circumference.toFixed(2) %>"
                    stroke-dashoffset="<%= offset.toFixed(2) %>"
                  />
                </svg>
                <div class="progress-text"><%= progressPercent %>%</div>
              </div>
              <div class="goal-info">
                <div class="goal-title"><%= goal.name %></div>
                <div class="goal-meta">
                  <div class="goal-tag"><%= goal.priority.toUpperCase() %></div>
                  <div>Target: ₹<%= goal.targetAmount.toLocaleString('en-IN') %></div>
                </div>
                <div class="text-gold" style="font-size: 12px; margin-top: 4px">
                  <%= new Date(goal.targetDate).toDateString() %>
                </div>
              </div>
            </div>
          <% }); %>
        </div>

        <div class="add-goal">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path
              d="M12 5V19"
              stroke="#0F0F0F"
              stroke-width="2"
              stroke-linecap="round"
            />
            <path
              d="M5 12H19"
              stroke="#0F0F0F"
              stroke-width="2"
              stroke-linecap="round"
            />
          </svg>
          New Goal
        </div>
      </div>

      <!-- AI Insights Hub -->
      <div class="card ai-insights">
        <div class="ai-header"> Inside From Ai </div>
        <% 
          const rawAdvice = employer?.aiAdvice || unemployed?.aiAdvice || "";
          const lines = rawAdvice
            .split('\n')
            .filter(line => line.trim().startsWith('-')) // Only keep bullet lines
            .map(line => {
              const trimmed = line.trim().slice(1).trim(); // remove "-"
              if (trimmed.startsWith('**') && trimmed.endsWith('**:')) {
                return `<li><strong>${trimmed.replace(/\*\*/g, '').replace(':', '')}</strong></li>`;
              } else {
                return `<li>${trimmed}</li>`;
              }
            })
            .join('\n');
        %>

        <div class="ai-card">
          <div class="ai-card-title">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
              <path
                d="M21 16V8.00002C20.9996 7.6493 20.9071 7.30483 20.7315 7.00119C20.556 6.69754 20.3037 6.44539 20 6.27002L13 2.27002C12.696 2.09449 12.3511 2.00208 12 2.00208C11.6489 2.00208 11.304 2.09449 11 2.27002L4 6.27002C3.69626 6.44539 3.44398 6.69754 3.26846 7.00119C3.09294 7.30483 3.00036 7.6493 3 8.00002V16C3.00036 16.3508 3.09294 16.6952 3.26846 16.9989C3.44398 17.3025 3.69626 17.5547 4 17.73L11 21.73C11.304 21.9056 11.6489 21.998 12 21.998C12.3511 21.998 12.696 21.9056 13 21.73L20 17.73C20.3037 17.5547 20.556 17.3025 20.7315 16.9989C20.9071 16.6952 20.9996 16.3508 21 16Z"
                stroke="#FFD700" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              <path d="M3.27002 6.95996L12 12.01L20.73 6.95996" stroke="#FFD700" stroke-width="2" stroke-linecap="round"
                stroke-linejoin="round" />
              <path d="M12 22.08V12" stroke="#FFD700" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            Ai Advice for you
          </div>

          <div class="ai-card-content">
            <ul class="list-disc pl-6 text-sm space-y-1 text-white leading-relaxed">
              <%- lines %>
            </ul>
          </div>
        </div>

      </div>

      <!-- Investment Preferences Panel -->
      <div class="card investment-panel">
        <div class="section-title">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
            <path d="M12 2L15 9L22 9L16 14L18 22L12 17L6 22L8 14L2 9L9 9L12 2Z" stroke="#FFD700" stroke-width="2" />
          </svg>
          Investment Profile
        </div>

        <div>
          <div>Risk Tolerance</div>
          <div class="risk-slider">
            <div class="risk-track"></div>
            <div class="risk-dot <%= employer.investmentPreferences.riskTolerance %>"></div>
          </div>
          <div class="risk-labels">
            <div>Low</div>
            <div>Medium</div>
            <div>High</div>
          </div>
        </div>

        <div class="asset-chart">
          <canvas id="assetChart" height="180"></canvas>
        </div>

        <div class="badge">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="#FFD700" stroke-width="2" />
            <path d="M8 12L11 15L16 9" stroke="#FFD700" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <%= employer.investmentPreferences.experienceLevel === "beginner" ? "New Investor" : employer.investmentPreferences.experienceLevel === "intermediate" ? "Smart Trader" : "Advanced Trader" %>
        </div>
      </div>

      <!-- Predictive Controls -->
      <!-- <div class="predictive-controls">
        <div class="toggle-group">
          <% const frequencies = ['daily', 'weekly', 'monthly']; %>
          <% frequencies.forEach(freq => { %>
            <div class="toggle-btn <%= employer.summaryFrequency === freq ? 'active' : '' %>">
              <%= freq.charAt(0).toUpperCase() + freq.slice(1) %>
            </div>
          <% }) %>
        </div>
        <div class="simulator-btn">Run Projection</div>
      </div> -->
    </div>

    <script>
        // Initialize charts
        document.addEventListener('DOMContentLoaded', function() {
            // Income Chart
            const incomeCtx = document.getElementById('incomeChart').getContext('2d');
            new Chart(incomeCtx, {
                type: 'bar',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Income',
                        data: [85000, 92000, 105000, 98000, 110000, 95000],
                        backgroundColor: '#FFD700',
                        borderRadius: 5,
                        borderSkipped: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: { color: 'rgba(255,255,255,0.1)' },
                            ticks: { color: '#999', font: { size: 10 } }
                        },
                        x: {
                            grid: { display: false },
                            ticks: { color: '#999', font: { size: 10 } }
                        }
                    }
                }
            });


            const expenseCtx = document.getElementById('expenseChart').getContext('2d');
            new Chart(expenseCtx, {
              type: 'doughnut',
              data: {
                labels: ['Fixed', 'Variable'],
                datasets: [{
                  data: [<%= totalFixed %>, <%= totalVariable %>],
                  backgroundColor: ['#4CAF50', '#F44336'],
                  borderWidth: 0
                }]
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '60%',
                plugins: {
                  legend: { display: false }
                }
              }
            });



            // Asset Distribution Chart
            const assetCtx = document.getElementById('assetChart').getContext('2d');
            new Chart(assetCtx, {
                type: 'pie',
                data: {
                    labels: ['Real Estate', 'Crypto', 'Stocks', 'Bonds', 'Cash'],
                    datasets: [{
                        data: [60, 25, 8, 5, 2],
                        backgroundColor: [
                            '#4CAF50',
                            '#FFC107',
                            '#2196F3',
                            '#9C27B0',
                            '#FF9800'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { 
                            position: 'right',
                            labels: {
                                color: '#E0E0E0',
                                padding: 10,
                                font: {
                                    size: 10
                                }
                            }
                        }
                    }
                }
            });

            // Interactive elements
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.toggle-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            document.querySelector('.simulator-btn').addEventListener('click', function() {
                this.innerHTML = 'Running Simulation...';
                setTimeout(() => {
                    this.innerHTML = 'Projection Complete!';
                    this.style.background = 'linear-gradient(90deg, #00C853, #4CAF50)';
                    setTimeout(() => {
                        this.innerHTML = 'Run Projection';
                        this.style.background = 'linear-gradient(90deg, var(--gold-accent), #FFAA00)';
                    }, 2000);
                }, 1500);
            });

            document.querySelectorAll('.ai-action').forEach(action => {
                action.addEventListener('click', function() {
                    const originalText = this.innerHTML;
                    this.innerHTML = '<span>✓ Applied</span>';
                    this.style.background = 'rgba(0, 200, 83, 0.2)';
                    this.style.color = '#00C853';
                    
                    setTimeout(() => {
                        this.innerHTML = originalText;
                        this.style.background = 'var(--gold-accent-10)';
                        this.style.color = 'var(--gold-accent)';
                    }, 2000);
                });
            });
        });
    </script>
  </body>
</html>