<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Feedback Widget</title>
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }

    /* Floating Icon - Enhanced for Mobile */
    .feedback-icon {
      position: fixed !important;
      bottom: 20px !important;
      left: 20px !important;
      background-color: #FFD700;
      color: #0F0F0F;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex !important;
      align-items: center;
      justify-content: center;
      font-size: 28px;
      cursor: pointer;
      box-shadow: 0 6px 20px rgba(0,0,0,0.4);
      z-index: 850 !important;
      transition: all 0.3s ease;
      border: none;
      outline: none;
      -webkit-tap-highlight-color: transparent;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    .feedback-icon:hover,
    .feedback-icon:active {
      transform: scale(1.1);
      box-shadow: 0 8px 25px rgba(0,0,0,0.5);
    }

    /* Mobile-specific adjustments */
    @media screen and (max-width: 768px) {
      .feedback-icon {
        width: 56px !important;
        height: 56px !important;
        font-size: 24px !important;
        bottom: 16px !important;
        left: 16px !important;
        z-index: 850 !important;
      }
    }

    @media screen and (max-width: 480px) {
      .feedback-icon {
        width: 52px !important;
        height: 52px !important;
        font-size: 22px !important;
        bottom: 12px !important;
        left: 12px !important;
        z-index: 850 !important;
      }
    }

    /* Popup Form Styles - Mobile Optimized */
    .popup {
      display: none;
      position: fixed;
      z-index: 951;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.7);
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }

    .popup-content {
      background-color: #1a1a1a;
      margin: 10vh auto;
      padding: 24px;
      border-radius: 12px;
      width: 90%;
      max-width: 500px;
      color: white;
      box-shadow: 0 8px 32px rgba(0,0,0,0.5);
      position: relative;
    }

    @media screen and (max-width: 768px) {
      .popup-content {
        margin: 5vh auto;
        width: 95%;
        padding: 20px;
        border-radius: 8px;
      }
    }

    .close {
      color: #FFD700;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      line-height: 1;
      padding: 4px;
    }

    .close:hover,
    .close:active {
      color: white;
    }

    h2 {
      margin-top: 0;
      margin-bottom: 20px;
      color: #FFD700;
      font-size: 22px;
    }

    /* Tab Navigation */
    .tab-nav {
      display: flex;
      margin-bottom: 20px;
      border-bottom: 2px solid #333;
    }

    .tab-btn {
      background: none;
      border: none;
      color: #ccc;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 16px;
      transition: all 0.3s ease;
      border-bottom: 2px solid transparent;
    }

    .tab-btn.active {
      color: #FFD700;
      border-bottom-color: #FFD700;
    }

    .tab-btn:hover {
      color: #FFD700;
    }

    /* Tab Content */
    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    .form-group {
      margin-bottom: 16px;
    }

    .form-group label {
      display: block;
      margin-bottom: 6px;
      color: #FFD700;
      font-weight: bold;
    }

    input[type="text"],
    input[type="email"],
    textarea {
      width: 100%;
      padding: 12px;
      border-radius: 6px;
      border: 2px solid #FFD700;
      background-color: #0F0F0F;
      color: white;
      font-size: 16px;
      font-family: Arial, sans-serif;
      outline: none;
    }

    input[type="text"]:focus,
    input[type="email"]:focus,
    textarea:focus {
      border-color: #fff;
      box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.3);
    }

    textarea {
      resize: vertical;
      min-height: 100px;
    }

    .submit-btn {
      background-color: #FFD700;
      color: #0F0F0F;
      padding: 12px 16px;
      border: none;
      cursor: pointer;
      width: 100%;
      border-radius: 6px;
      font-size: 16px;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }

    .submit-btn:hover,
    .submit-btn:active {
      background-color: #e6c200;
    }

    /* Success message */
    .success-message {
      background-color: #4CAF50;
      color: white;
      padding: 12px;
      border-radius: 6px;
      margin-bottom: 16px;
      display: none;
    }

    /* Past Feedback Styles */
    .feedback-history {
      max-height: 400px;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }

    .feedback-item {
      background-color: #2a2a2a;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 16px;
      border-left: 4px solid #FFD700;
    }

    .feedback-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }

    .feedback-author {
      color: #FFD700;
      font-weight: bold;
    }

    .feedback-date {
      color: #999;
      font-size: 12px;
    }

    .feedback-text {
      color: #e0e0e0;
      line-height: 1.5;
    }

    .no-feedback {
      text-align: center;
      color: #999;
      font-style: italic;
      padding: 40px 20px;
    }

    /* Loading state */
    .loading {
      text-align: center;
      color: #FFD700;
      padding: 20px;
    }

    .loading::after {
      content: "...";
      animation: dots 1s infinite;
    }

    @keyframes dots {
      0%, 20% { opacity: 0; }
      40% { opacity: 0.5; }
      100% { opacity: 1; }
    }
  </style>
</head>
<body>

  <!-- Your actual website content goes here -->

  <!-- Floating Icon -->
  <div class="feedback-icon" id="feedbackIcon" title="Give Feedback" role="button" tabindex="0">
    ðŸ’¬
  </div>

  <!-- Popup Form -->
  <div id="feedbackPopup" class="popup" role="dialog" aria-labelledby="feedbackTitle" aria-hidden="true">
    <div class="popup-content">
      <span class="close" id="closePopup" role="button" tabindex="0" aria-label="Close feedback form">&times;</span>
      <h2 id="feedbackTitle">Feedback</h2>
      
      <!-- Tab Navigation -->
      <div class="tab-nav">
        <button class="tab-btn active" data-tab="submit">Submit Feedback</button>
        <button class="tab-btn" data-tab="history">View Past Feedback</button>
      </div>

      <!-- Submit Feedback Tab -->
      <div id="submitTab" class="tab-content active">
        <div class="success-message" id="successMessage">
          Thank you for your feedback! We appreciate it.
        </div>

        <form method="POST" action="/submit-feedback" id="feedbackForm">
          <div class="form-group">
            <label for="userName">Your Name:</label>
            <input type="text" id="userName" name="name" placeholder="Enter your name" required>
          </div>
          
          <div class="form-group">
            <label for="userEmail">Email (optional):</label>
            <input type="email" id="userEmail" name="email" placeholder="your@email.com">
          </div>
          
          <div class="form-group">
            <label for="userFeedback">Your Feedback:</label>
            <textarea id="userFeedback" name="feedback" placeholder="Tell us what you think..." rows="4" required></textarea>
          </div>
          
          <button type="submit" class="submit-btn">Submit Feedback</button>
        </form>
      </div>

      <!-- Past Feedback Tab -->
      <div id="historyTab" class="tab-content">
        <div id="feedbackHistory" class="feedback-history">
          <div class="loading" id="historyLoading">Loading feedback</div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Store feedback data
    let feedbackData = [];

    // Get elements
    const feedbackIcon = document.getElementById('feedbackIcon');
    const feedbackPopup = document.getElementById('feedbackPopup');
    const closePopup = document.getElementById('closePopup');
    const feedbackForm = document.getElementById('feedbackForm');
    const successMessage = document.getElementById('successMessage');
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    // Tab switching functionality
    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const targetTab = btn.dataset.tab;
        
        // Remove active class from all tabs and contents
        tabBtns.forEach(b => b.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        // Add active class to clicked tab and corresponding content
        btn.classList.add('active');
        document.getElementById(targetTab + 'Tab').classList.add('active');
        
        // Load feedback history when history tab is clicked
        if (targetTab === 'history') {
          loadFeedbackHistory();
        }
      });
    });

    // Function to format date
    function formatDate(date) {
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) {
        return 'Today';
      } else if (diffDays === 1) {
        return 'Yesterday';
      } else if (diffDays < 7) {
        return `${diffDays} days ago`;
      } else {
        return date.toLocaleDateString();
      }
    }

    // Function to load and display feedback history
    async function loadFeedbackHistory() {
      const historyContainer = document.getElementById('feedbackHistory');
      const loadingElement = document.getElementById('historyLoading');
      
      // Show loading
      loadingElement.style.display = 'block';
      
      try {
        // Fetch feedback from your backend
        const response = await fetch('/api/feedback');
        
        if (!response.ok) {
          throw new Error('Failed to fetch feedback');
        }
        
        const data = await response.json();
        feedbackData = data.feedback || [];
        
        loadingElement.style.display = 'none';
        
        if (feedbackData.length === 0) {
          historyContainer.innerHTML = '<div class="no-feedback">No feedback yet. Be the first to share your thoughts!</div>';
          return;
        }
        
        // Sort feedback by date (newest first)
        const sortedFeedback = feedbackData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        
        // Generate HTML for feedback items
        const feedbackHTML = sortedFeedback.map(item => `
          <div class="feedback-item">
            <div class="feedback-header">
              <span class="feedback-author">${escapeHtml(item.name)}</span>
              <span class="feedback-date">${formatDate(new Date(item.createdAt))}</span>
            </div>
            <div class="feedback-text">${escapeHtml(item.message)}</div>
          </div>
        `).join('');
        
        historyContainer.innerHTML = feedbackHTML;
        
      } catch (error) {
        loadingElement.style.display = 'none';
        console.error('Error loading feedback:', error);
        historyContainer.innerHTML = '<div class="no-feedback">Error loading feedback. Please try again later.</div>';
      }
    }

    // Helper function to escape HTML to prevent XSS
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Function to show popup
    function showPopup() {
      feedbackPopup.style.display = 'block';
      feedbackPopup.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      
      // Reset to first tab
      tabBtns.forEach(b => b.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      document.querySelector('[data-tab="submit"]').classList.add('active');
      document.getElementById('submitTab').classList.add('active');
      
      // Focus first input for accessibility
      setTimeout(() => {
        document.getElementById('userName').focus();
      }, 100);
    }

    // Function to hide popup
    function hidePopup() {
      feedbackPopup.style.display = 'none';
      feedbackPopup.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      successMessage.style.display = 'none';
      feedbackForm.reset();
    }

    // Simplified approach - always show button on left side
    function handleMobileMenu() {
      const feedbackIcon = document.getElementById('feedbackIcon');
      
      function ensureButtonVisible() {
        if (feedbackIcon) {
          feedbackIcon.style.display = 'flex';
          feedbackIcon.style.visibility = 'visible';
          feedbackIcon.style.left = '16px';
          feedbackIcon.style.right = 'auto';
          feedbackIcon.style.zIndex = '850';
        }
      }

      ensureButtonVisible();
      setInterval(ensureButtonVisible, 1000);
      
      window.addEventListener('load', ensureButtonVisible);
      window.addEventListener('resize', ensureButtonVisible);
      document.addEventListener('visibilitychange', ensureButtonVisible);
    }

    // Initialize immediately
    handleMobileMenu();
    
    // Backup initialization
    setTimeout(() => {
      const feedbackIcon = document.getElementById('feedbackIcon');
      if (feedbackIcon) {
        feedbackIcon.style.display = 'flex';
        feedbackIcon.style.visibility = 'visible';
        feedbackIcon.style.left = '16px';
        feedbackIcon.style.right = 'auto';
        feedbackIcon.style.zIndex = '850';
      }
    }, 500);

    // Event listeners for opening popup
    feedbackIcon.addEventListener('click', showPopup);
    feedbackIcon.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        showPopup();
      }
    });

    // Event listeners for closing popup
    closePopup.addEventListener('click', hidePopup);
    closePopup.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        hidePopup();
      }
    });

    // Close on background click
    window.addEventListener('click', (event) => {
      if (event.target === feedbackPopup) {
        hidePopup();
      }
    });

    // Close on Escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && feedbackPopup.style.display === 'block') {
        hidePopup();
      }
    });

    // Handle form submission
    feedbackForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      // Get form data
      const formData = {
        name: document.getElementById('userName').value,
        email: document.getElementById('userEmail').value,
        feedback: document.getElementById('userFeedback').value
      };
      
      try {
        // Submit to your backend
        const response = await fetch('/submit-feedback', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
          throw new Error('Failed to submit feedback');
        }
        
        const result = await response.json();
        
        // Show success message
        successMessage.style.display = 'block';
        successMessage.textContent = result.message || 'Thank you for your feedback! We appreciate it.';
        
        // Reset form
        feedbackForm.reset();
        
        console.log('Feedback submitted successfully:', result);
        
        // Auto-close after 2 seconds
        setTimeout(() => {
          hidePopup();
        }, 2000);
        
      } catch (error) {
        console.error('Error submitting feedback:', error);
        successMessage.style.display = 'block';
        successMessage.style.backgroundColor = '#f44336'; // Red for error
        successMessage.textContent = 'Error submitting feedback. Please try again.';
        
        // Reset error message color after 3 seconds
        setTimeout(() => {
          successMessage.style.backgroundColor = '#4CAF50';
        }, 3000);
      }
    });

    // Prevent iOS zoom on input focus
    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
      const inputs = document.querySelectorAll('input[type="text"], input[type="email"], textarea');
      inputs.forEach(input => {
        input.style.fontSize = '16px';
      });
    }
  </script>

</body>
</html>